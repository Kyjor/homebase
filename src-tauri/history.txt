
brew uninstall --cask docker --force
brew uninstall --formula docker --force
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
. "$HOME/.cargo/env"            # For sh/bash/zsh/ash/dash/pdksh
xcode-select --install
ls
cd Documents/Projects/mlvp
tauri ios dev --force-ip-prompt
npm tauri ios dev --force-ip-prompt
npm run tauri ios dev --force-ip-prompt
npm run tauri ios init
sudo npm run tauri ios init
npm run tauri ios init
sudo gem install cocoapods
npm run tauri ios init
sudo gem install cocoapods
brew install ruby
echo 'export PATH="/opt/homebrew/opt/ruby/bin:$PATH"' >> ~/.zshrc && source ~/.zshrc && gem install cocoapods
sudo gem install cocoapods
cargo install tauri-cli
npm install -g @tauri-apps/cli
sudo npm install -g @tauri-apps/cli
tauri ios init
which pod
echo 'export PATH="/opt/homebrew/lib/ruby/gems/3.4.0/bin:$PATH"' >> ~/.zshrc && source ~/.zshrc && which pod
pod --version
brew install cocoapods
cd mlvp && npm run tauri ios init
sudo gem update --system && sudo gem outdated
npm run tauri ios init
cargo install tauri-cli && tauri ios init
cargo tauri ios init
sudo gem update --system && sudo gem outdated
sudo gem update
sudo gem outdated
cargo tauri ios init
which ruby && ruby --version && which gem && gem env
gem outdated
sudo mkdir -p /Users/kyleconel/.cache/gem && sudo chown -R kyleconel:staff /Users/kyleconel/.cache/gem
gem outdated
cargo tauri ios init
brew upgrade xcodegen
cargo tauri ios init
xcrun xctrace list devices
killall -9 com.apple.CoreSimulator.CoreSimulatorService && killall -9 com.apple.simulator.simulator
sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService && sudo killall -9 com.apple.simulator.simulator
npm run tauri ios build
npm run tauri ios build
chmod +x mlvp/src-tauri/scripts/ios-build.sh
mkdir -p mlvp/src-tauri/scripts
chmod +x mlvp/src-tauri/scripts/ios-build.sh
chmod +x mlvp/src-tauri/scripts/ios-build.sh
chmod +x mlvp/src-tauri/scripts/ios-build.sh
ls -l mlvp/src-tauri/scripts/ios-build.sh
chmod +x mlvp/src-tauri/scripts/ios-build.sh
cd mlvp && FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
cd mlvp && cargo tauri ios init
ls -l ~/Library/MobileDevice/Provisioning\ Profiles/
security find-identity -v -p codesigning
xcrun altool --list-providers
cd src-tauri/gen/apple && xcodebuild -list -project mlvp.xcodeproj
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO npm run tauri ios build
ls -l ~/Library/MobileDevice/Provisioning\ Profiles/
cd src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" -allowProvisioningUpdates
cd mlvp/src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" -allowProvisioningUpdates
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" -allowProvisioningUpdates
cd /Users/kyleconel/Documents/Projects/mlvp && cargo clean && cargo tauri ios build
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri && cargo clean && cargo tauri ios build
sudo rm -rf target && cargo tauri ios build
cd .. && sudo chown -R kyleconel:staff . && npm run build && cd src-tauri && cargo tauri ios build
sudo chown -R kyleconel:staff . && sudo chmod -R 755 .
cd gen/apple && RUST_BACKTRACE=full RUST_LOG=info xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
sudo xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
security find-identity -v -p codesigning
security find-certificate -a -c "Apple Distribution" -Z | grep -A 2 "SHA-1 hash"
xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Development: kyleconel@gmail.com (4YYD56K3K3)" DEVELOPMENT_TEAM="4YYD56K3K3" | cat
cat mlvp_iOS/Info.plist
cat project.yml
cat mlvp_iOS/mlvp_iOS.entitlements
ls -la ~/Downloads/*.mobileprovision
mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/ && cp ~/Downloads/MLVP.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
lsof -i :1420 | grep LISTEN
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
rustup target add aarch64-apple-ios x86_64-apple-ios
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
lsof -iTCP -sTCP:LISTEN -n -P | grep 127.0.0.1
ps aux | grep 'cargo tauri dev -t ios' | grep -v grep
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri && cargo tauri dev -t ios
rustup target list | grep ios
rustup target add aarch64-apple-ios-macabi x86_64-apple-ios-macabi
cargo tauri dev -t ios
cargo tauri dev -t aarch64-apple-ios
lsof -i :1420 | grep LISTEN
kill -9 59359
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
cargo install tauri-cli --force
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri/gen/apple && xcodebuild -workspace mlvp.xcodeproj/project.xcworkspace -scheme mlvp_iOS -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="Apple Distribution: Kyle Conel (AKG5NATH99)" PROVISIONING_PROFILE_SPECIFIER="MLVP" DEVELOPMENT_TEAM="AKG5NATH99" | cat
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri && cargo tauri dev -t aarch64-apple-ios
cd mlvp
npm install
sudo npm install
npm run dev
sudo npm run dev
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri && cargo tauri dev -t ios
cd /Users/kyleconel/Documents/Projects/mlvp && sudo cargo tauri ios build --target ios-simulator
sudo cargo tauri ios build --target aarch64-sim
cargo tauri ios build --target aarch64-sim
sudo rm -rf dist && npm run build
cargo tauri ios build --target aarch64-sim
sudo rustup default stable
sudo cargo tauri ios build
kill -9 58982 && cd /Users/kyleconel/Documents/Projects/mlvp && npm run dev
cd /Users/kyleconel/Documents/Projects/mlvp && npm run dev
cd mlvp
npm run tauri ios dev
npm tauri ios init
npm run tauri ios init
npm run tauri ios init
npm run tauri ios dev
npm run tauri ios dev
cargo tauri ios init
npm run tauri ios dev
sudo npm run tauri ios dev
sudo npm run tauri ios dev
sudo npm run tauri ios dev
sudo npm run tauri ios 
sudo npm run tauri ios build
sudo npm run tauri ios build
sudo npm run tauri ios build
sudo npm run tauri ios build
sudo npm run tauri ios build
npm run dev
  open src-tauri/gen/apple/mlvp.xcodeproj
  open src-tauri/gen/apple/mlvp.xcodeproj
sudo npm run tauri ios build
sudo npm run tauri ios dev
sudo npm run tauri ios build
  open src-tauri/gen/apple/mlvp.xcodeproj
sudo npm run tauri ios build
  open src-tauri/gen/apple/mlvp.xcodeproj
sudo npm run tauri ios build
sudo npm run tauri ios build
sudo npm run tauri ios build
   rm -rf ~/Library/Developer/Xcode/DerivedData/mlvp-*
sudo npm run tauri ios build
sudo npm run tauri ios build
sudo npm run tauri ios build
sudo npm run tauri ios build
sudo npm run tauri ios build
sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
   cargo tauri dev -t ios
cd src-tauri
   cargo tauri dev -t ios
rustup target list
cd ..
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
cargo tauri ios dev --open
cargo tauri ios dev --open
cargo tauri ios build --open
sudo cargo tauri ios build --open
sudo cargo tauri ios build 
sudo cargo tauri ios build --target aarch64-sim
rustup default stable
sudo cargo tauri ios build --target aarch64-sim
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri && cargo tauri dev -t ios
cargo tauri dev -t aarch64-apple-ios
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri && cargo tauri dev -t ios
cd /Users/kyleconel/Documents/Projects/mlvp && npm run dev
cargo tauri ios init
cd /Users/kyleconel/Documents/Projects/mlvp && npm run dev
cargo tauri ios dev
cargo tauri ios dev
cargo tauri ios dev
cargo tauri ios dev
cargo tauri ios build
open gen/apple/mlvp.xcodeproj
open src-tauri/gen/apple/mlvp.xcodeproj
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
FLUTTER_XCODE_CODE_SIGN_IDENTITY="" FLUTTER_XCODE_CODE_SIGNING_REQUIRED=NO sudo npm run tauri ios build
IOS_MOBILE_PROVISION=\
 sudo npm run tauri ios build
IOS_MOBILE_PROVISION=MIIvPQYJKoZIhvcNAQcCoIIvLjCCLyoCAQExCzAJBgUrDgMCGgUAMIIfSgYJKoZIhvcNAQcBoIIfOwSCHzc8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZS8vRFREIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5TGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5BcHBJRE5hbWU8L2tleT4KCTxzdHJpbmc+WEMgY29tIG1sdnAgYXBwPC9zdHJpbmc+Cgk8a2V5PkFwcGxpY2F0aW9uSWRlbnRpZmllclByZWZpeDwva2V5PgoJPGFycmF5PgoJPHN0cmluZz5BS0c1TkFUSDk5PC9zdHJpbmc+Cgk8L2FycmF5PgoJPGtleT5DcmVhdGlvbkRhdGU8L2tleT4KCTxkYXRlPjIwMjUtMDYtMDdUMDI6NTU6MzFaPC9kYXRlPgoJPGtleT5QbGF0Zm9ybTwva2V5PgoJPGFycmF5PgoJCTxzdHJpbmc+aU9TPC9zdHJpbmc+CgkJPHN0cmluZz54ck9TPC9zdHJpbmc+CgkJPHN0cmluZz52aXNpb25PUzwvc3RyaW5nPgoJPC9hcnJheT4KCTxrZXk+SXNYY29kZU1hbmFnZWQ8L2tleT4KCTxmYWxzZS8+Cgk8a2V5PkRldmVsb3BlckNlcnRpZmljYXRlczwva2V5PgoJPGFycmF5PgoJCTxkYXRhPk1JSUZ3ekNDQkt1Z0F3SUJBZ0lRU0tjTjYyMnhiVUF3Q3Jkc3BXR3A0ekFOQmdrcWhraUc5dzBCQVFzRkFEQjFNVVF3UWdZRFZRUURERHRCY0hCc1pTQlhiM0pzWkhkcFpHVWdSR1YyWld4dmNHVnlJRkpsYkdGMGFXOXVjeUJEWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2Y21sMGVURUxNQWtHQTFVRUN3d0NSek14RXpBUkJnTlZCQW9NQ2tGd2NHeGxJRWx1WXk0eEN6QUpCZ05WQkFZVEFsVlRNQjRYRFRJMU1EWXdOekF5TkRNeE1Wb1hEVEkyTURZd056QXlORE14TUZvd2dZa3hHakFZQmdvSmtpYUprL0lzWkFFQkRBcEJTMGMxVGtGVVNEazVNVFF3TWdZRFZRUUREQ3RCY0hCc1pTQkVhWE4wY21saWRYUnBiMjQ2SUV0NWJHVWdRMjl1Wld3Z0tFRkxSelZPUVZSSU9Ua3BNUk13RVFZRFZRUUxEQXBCUzBjMVRrRlVTRGs1TVJNd0VRWURWUVFLREFwTGVXeGxJRU52Ym1Wc01Rc3dDUVlEVlFRR0V3SlZVekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFKWTBJNFEvT2J6aSsyQ3BXbE1zS2dTdm92bnkrZkpaRVlYZ0wrYk14UDhVeHhJZi9NcFJRamhqNmVZTURUTjBqdzZQZHJ5RzRYYVhxV0YxNzMzaytmbVUyWDhYZzhjV0IwdFdVdzJqalgwSEJ2WU1veGRwcDc3SFBPQ0ZkS25Xa09oNUVROUtXaWVOcFkzQnpMQzQ0alZ5RG1jNm91azd5bWsyK1RkNWNGMFdPTXp6YStDSWJwb2R3NlFjQjBMRGE2WmE4WXVheWFESGVsTWNaNjQrOWtBUDArOFlJVi9UNXVMb0VDUTdYbFF5WDNiQVhNYXBhN082M3lNV1B2TmNtMk9Obk9GMEtRMFhTK3hTLzZuRjlDanJiS213Yy9zdmJrWDd3bFpoK1MvTGwzUU1Rb2VsWUdlS3hUUVJkZmEwOForY2ZDMnVJbFZldGRvalhHWnloZGNDQXdFQUFhT0NBamd3Z2dJME1Bd0dBMVVkRXdFQi93UUNNQUF3SHdZRFZSMGpCQmd3Rm9BVUNmN0FGWkQ1cjJRS2toSzVKaWhqREpmc3A3SXdjQVlJS3dZQkJRVUhBUUVFWkRCaU1DMEdDQ3NHQVFVRkJ6QUNoaUZvZEhSd09pOHZZMlZ5ZEhNdVlYQndiR1V1WTI5dEwzZDNaSEpuTXk1a1pYSXdNUVlJS3dZQkJRVUhNQUdHSldoMGRIQTZMeTl2WTNOd0xtRndjR3hsTG1OdmJTOXZZM053TURNdGQzZGtjbWN6TURVd2dnRWVCZ05WSFNBRWdnRVZNSUlCRVRDQ0FRMEdDU3FHU0liM1kyUUZBVENCL3pDQnd3WUlLd1lCQlFVSEFnSXdnYllNZ2JOU1pXeHBZVzVqWlNCdmJpQjBhR2x6SUdObGNuUnBabWxqWVhSbElHSjVJR0Z1ZVNCd1lYSjBlU0JoYzNOMWJXVnpJR0ZqWTJWd2RHRnVZMlVnYjJZZ2RHaGxJSFJvWlc0Z1lYQndiR2xqWVdKc1pTQnpkR0Z1WkdGeVpDQjBaWEp0Y3lCaGJtUWdZMjl1WkdsMGFXOXVjeUJ2WmlCMWMyVXNJR05sY25ScFptbGpZWFJsSUhCdmJHbGplU0JoYm1RZ1kyVnlkR2xtYVdOaGRHbHZiaUJ3Y21GamRHbGpaU0J6ZEdGMFpXMWxiblJ6TGpBM0JnZ3JCZ0VGQlFjQ0FSWXJhSFIwY0hNNkx5OTNkM2N1WVhCd2JHVXVZMjl0TDJObGNuUnBabWxqWVhSbFlYVjBhRzl5YVhSNUx6QVdCZ05WSFNVQkFmOEVEREFLQmdnckJnRUZCUWNEQXpBZEJnTlZIUTRFRmdRVXhyTWluVHh5b0RmZWZZL2VHVTdnTHczRy9nSXdEZ1lEVlIwUEFRSC9CQVFEQWdlQU1CTUdDaXFHU0liM1kyUUdBUWNCQWY4RUFnVUFNQk1HQ2lxR1NJYjNZMlFHQVFRQkFmOEVBZ1VBTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFETGFVN2xTd0RmZDlGUExIOWpTN3lIRlFwR2RKVElBNmtIMndGVWs5Y2dIQWxCUzR1VkRyalNhTEg0YmRIK0Z4bXk1dEtoQnBlQmxUUmNtT3hGNHBpSnZ3c0FOWjRKVXd5eEVpMnhzMjMxdXNLaHZENXQ5UVE0U1hiNkN4aTRTTHV0RjZKWVc0Q2dwTm41VHZtSXg0L20yd0tDZWdGd3dWbHp6YTVxT2FFTmg5eXd0d29haGFUaHRkanRIcTF3MHJEVndRMjdtODJtei85Zk81bWcyVW9ZdXJGa2JHZm5VSTNReEdFY1hSQWNrcjVvRzhRRDg0RWlxOFR2TTZrelFhcnVmL0JheTJENERpajU5QXQ2bTdKeHNjMC9OYXBmaVE3QUc0RGRwVTBTc3RJdlJ6RUxSK2M2T1lpaDJDUWx2cUIwcWxUQVJYNC9YVlpncXRranR1V2M8L2RhdGE+Cgk8L2FycmF5PgoKCTxrZXk+REVSLUVuY29kZWQtUHJvZmlsZTwva2V5PgoJPGRhdGE+TUlJTkZRWUpLb1pJaHZjTkFRY0NvSUlOQmpDQ0RRSUNBUUV4RHpBTkJnbGdoa2dCWlFNRUFnRUZBRENDQXM4R0NTcUdTSWIzRFFFSEFhQ0NBc0FFZ2dLOE1ZSUN1REFNREFST1lXMWxEQVJOVEZaUU1Bd01CMVpsY25OcGIyNENBUUV3RHd3S1ZHbHRaVlJ2VEdsMlpRSUJCekFUREE1SmMxaGpiMlJsVFdGdVlXZGxaQUVCQURBV0RBaFVaV0Z0VG1GdFpRd0tTM2xzWlNCRGIyNWxiREFjREFsQmNIQkpSRTVoYldVTUQxaERJR052YlNCdGJIWndJR0Z3Y0RBZERBeERjbVZoZEdsdmJrUmhkR1VYRFRJMU1EWXdOekF5TlRVek1Wb3dIZ3dPVkdWaGJVbGtaVzUwYVdacFpYSXdEQXdLUVV0SE5VNUJWRWc1T1RBZkRBNUZlSEJwY21GMGFXOXVSR0YwWlJjTk1qVXdOakUwTURJMU5UTXhXakFnREJkUWNtOW1hV3hsUkdsemRISnBZblYwYVc5dVZIbHdaUXdGUVVSSVQwTXdJUXdJVUd4aGRHWnZjbTB3RlF3RGFVOVREQVI0Y2s5VERBaDJhWE5wYjI1UFV6QXJEQnRCY0hCc2FXTmhkR2x2Ymtsa1pXNTBhV1pwWlhKUWNtVm1hWGd3REF3S1FVdEhOVTVCVkVnNU9UQXNEQVJWVlVsRURDUTVZV1k1T0RBNE1DMDVZVFF6TFRRek1Ua3RZalppTWkwME9EbG1OREV3T1RoaU5XTXdNUXdTVUhKdmRtbHphVzl1WldSRVpYWnBZMlZ6TUJzTUdUQXdNREE0TVRNd0xUQXdNRUUwT1VRMk1ERTJNREF3TVVNd093d1ZSR1YyWld4dmNHVnlRMlZ5ZEdsbWFXTmhkR1Z6TUNJRUlKUU1KWU00VVlDd3VodUxaUERSL3lHb0pBNEZRaEFwNGRteHEwK1J0TzkzTUlITkRBeEZiblJwZEd4bGJXVnVkSE53Z2J3Q0FRR3dnYll3TVF3V1lYQndiR2xqWVhScGIyNHRhV1JsYm5ScFptbGxjZ3dYUVV0SE5VNUJWRWc1T1M1amIyMHViV3gyY0M1aGNIQXdNUXdqWTI5dExtRndjR3hsTG1SbGRtVnNiM0JsY2k1MFpXRnRMV2xrWlc1MGFXWnBaWElNQ2tGTFJ6Vk9RVlJJT1Rrd0V3d09aMlYwTFhSaGMyc3RZV3hzYjNjQkFRQXdPUXdXYTJWNVkyaGhhVzR0WVdOalpYTnpMV2R5YjNWd2N6QWZEQXhCUzBjMVRrRlVTRGs1TGlvTUQyTnZiUzVoY0hCc1pTNTBiMnRsYnFDQ0NEd3dnZ0pETUlJQnlhQURBZ0VDQWdndHhmeUkwc1ZMbFRBS0JnZ3Foa2pPUFFRREF6Qm5NUnN3R1FZRFZRUUREQkpCY0hCc1pTQlNiMjkwSUVOQklDMGdSek14SmpBa0JnTlZCQXNNSFVGd2NHeGxJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNU1STXdFUVlEVlFRS0RBcEJjSEJzWlNCSmJtTXVNUXN3Q1FZRFZRUUdFd0pWVXpBZUZ3MHhOREEwTXpBeE9ERTVNRFphRncwek9UQTBNekF4T0RFNU1EWmFNR2N4R3pBWkJnTlZCQU1NRWtGd2NHeGxJRkp2YjNRZ1EwRWdMU0JITXpFbU1DUUdBMVVFQ3d3ZFFYQndiR1VnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3hFekFSQmdOVkJBb01Da0Z3Y0d4bElFbHVZeTR4Q3pBSkJnTlZCQVlUQWxWVE1IWXdFQVlIS29aSXpqMENBUVlGSzRFRUFDSURZZ0FFbU9rdlBVQnlwTzJUSW5LQkV4emRFSlh4eGFOT2Nkd1VGdGtPNWFZRktuZGtlMTlPT05PN0hFUzFmL1VmdGpKaVhjbnBoRnRQTUU4UldnRDlXRmdNcGZVUExFMEhSeE4xMnBlWGwyOHhYTzByblhzZ085aTVWTmxlbWFRNlVRb3hvMEl3UURBZEJnTlZIUTRFRmdRVXU3RGVvVmd6aUpxa2lwbmV2cjNycjlyTEpLc3dEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZd0NnWUlLb1pJemowRUF3TURhQUF3WlFJeEFJUHB3Y1FXWGhwZE5Calo3ZS8wYkE0QVJrdTQzN0pHRWNVUC9lWjZqS0dtYTg3Q0E5U2M5WlBHZExocTM2b2pGUUl3YldhS0VNclVEZFJQelkxRFByU0tZNlV6YnVOdDJoZTNaQi9JVXliNWlHSjBPUXNYVzh0UnFBem9HQVBub3JJb01JSUM1akNDQW0yZ0F3SUJBZ0lJTXczdStMOU1hQzR3Q2dZSUtvWkl6ajBFQXdNd1p6RWJNQmtHQTFVRUF3d1NRWEJ3YkdVZ1VtOXZkQ0JEUVNBdElFY3pNU1l3SkFZRFZRUUxEQjFCY0hCc1pTQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVRFVE1CRUdBMVVFQ2d3S1FYQndiR1VnU1c1akxqRUxNQWtHQTFVRUJoTUNWVk13SGhjTk1UY3dNakl5TWpJeU16SXlXaGNOTXpJd01qRTRNREF3TURBd1dqQnlNU1l3SkFZRFZRUUREQjFCY0hCc1pTQlRlWE4wWlcwZ1NXNTBaV2R5WVhScGIyNGdRMEVnTkRFbU1DUUdBMVVFQ3d3ZFFYQndiR1VnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3hFekFSQmdOVkJBb01Da0Z3Y0d4bElFbHVZeTR4Q3pBSkJnTlZCQVlUQWxWVE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUJtdWtWbTk5bnlmUnpqYU9raHRXelZRMlpFckpsR2laK3NrZ2Z1TDFXQS9jNG1yckdVY3ZMdTg3cEFHMEFSTkVmRm9tcmFDY0tTV0s1ZVlHYjA5OFdxT0I5ekNCOURBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUI4R0ExVWRJd1FZTUJhQUZMdXczcUZZTTRpYXBJcVozcjY5NjYvYXl5U3JNRVlHQ0NzR0FRVUZCd0VCQkRvd09EQTJCZ2dyQmdFRkJRY3dBWVlxYUhSMGNEb3ZMMjlqYzNBdVlYQndiR1V1WTI5dEwyOWpjM0F3TXkxaGNIQnNaWEp2YjNSallXY3pNRGNHQTFVZEh3UXdNQzR3TEtBcW9DaUdKbWgwZEhBNkx5OWpjbXd1WVhCd2JHVXVZMjl0TDJGd2NHeGxjbTl2ZEdOaFp6TXVZM0pzTUIwR0ExVWREZ1FXQkJSNlI3bzRpaFVrU0NKR3piNlBHaVI3TkFNcWFUQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0VBWUtLb1pJaHZkalpBWUNFUVFDQlFBd0NnWUlLb1pJemowRUF3TURad0F3WkFJd0ZReXBqc2F2bG1scnA1L2RYTlFEV1d5dVV0Umd4b3QyNExmRm92RUpmT0NhNDJ1eDQzd3h4Q2Q2cDQ2Si9hdDNBakJoTXlEeEtmLzVoekt1S2Noa1BYWjdVYVRTQWk5MnZtQWlrZkhWT25YY3RPTEdLcGIreGduY1NrL1ZKUEQ4eXJJd2dnTUhNSUlDcmFBREFnRUNBZ2dYZ0tnMFptVHF5ekFLQmdncWhrak9QUVFEQWpCeU1TWXdKQVlEVlFRRERCMUJjSEJzWlNCVGVYTjBaVzBnU1c1MFpXZHlZWFJwYjI0Z1EwRWdOREVtTUNRR0ExVUVDd3dkUVhCd2JHVWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhreEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSTBNVEV5TURBek1qQTBOVm9YRFRJNE1USXhOREU0TURBek1Gb3dUakVxTUNnR0ExVUVBd3doVjFkRVVpQlFjbTkyYVhOcGIyNXBibWNnVUhKdlptbHNaU0JUYVdkdWFXNW5NUk13RVFZRFZRUUtEQXBCY0hCc1pTQkpibU11TVFzd0NRWURWUVFHRXdKVlV6QlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJQV1VXdzdCMUZRL0dkNUdZQ1ZmUG80cHoyeFBrOVVjdDMyMlVsOGY0ZnRqQWJLQ0c2aWhUclRUN2U5V3VSZlVtTTFndDg1T3FiYzZWM1pUNkRORHIzMmpnZ0ZQTUlJQlN6QU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZIcEh1amlLRlNSSUlrYk52bzhhSkhzMEF5cHBNRUVHQ0NzR0FRVUZCd0VCQkRVd016QXhCZ2dyQmdFRkJRY3dBWVlsYUhSMGNEb3ZMMjlqYzNBdVlYQndiR1V1WTI5dEwyOWpjM0F3TXkxaGMybGpZVFF3TXpDQmxnWURWUjBnQklHT01JR0xNSUdJQmdrcWhraUc5Mk5rQlFFd2V6QjVCZ2dyQmdFRkJRY0NBakJ0REd0VWFHbHpJR05sY25ScFptbGpZWFJsSUdseklIUnZJR0psSUhWelpXUWdaWGhqYkhWemFYWmxiSGtnWm05eUlHWjFibU4wYVc5dWN5QnBiblJsY201aGJDQjBieUJCY0hCc1pTQlFjbTlrZFdOMGN5QmhibVF2YjNJZ1FYQndiR1VnY0hKdlkyVnpjMlZ6TGpBZEJnTlZIUTRFRmdRVTZWTE9EYkRHaUJwbFNyaWJFWS94M0I1SEZId3dEZ1lEVlIwUEFRSC9CQVFEQWdlQU1BOEdDU3FHU0liM1kyUU1Fd1FDQlFBd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFPK2F2RjJnV21ac1pMbk5ONU9wVTdRM3hjZHM0WVA2RnhyZUN6M1dxMmhtQWlCNEk5bkRpQWRKUGZYN2lZK1FibGpnVjU5ai8xamgxbzljbUdQV09qNC9uVEdDQWRjd2dnSFRBZ0VCTUg0d2NqRW1NQ1FHQTFVRUF3d2RRWEJ3YkdVZ1UzbHpkR1Z0SUVsdWRHVm5jbUYwYVc5dUlFTkJJRFF4SmpBa0JnTlZCQXNNSFVGd2NHeGxJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNU1STXdFUVlEVlFRS0RBcEJjSEJzWlNCSmJtTXVNUXN3Q1FZRFZRUUdFd0pWVXdJSUY0Q29OR1prNnNzd0RRWUpZSVpJQVdVREJBSUJCUUNnZ2Vrd0dBWUpLb1pJaHZjTkFRa0RNUXNHQ1NxR1NJYjNEUUVIQVRBY0Jna3Foa2lHOXcwQkNRVXhEeGNOTWpVd05qQTNNREkxTlRNeFdqQXFCZ2txaGtpRzl3MEJDVFF4SFRBYk1BMEdDV0NHU0FGbEF3UUNBUVVBb1FvR0NDcUdTTTQ5QkFNQ01DOEdDU3FHU0liM0RRRUpCREVpQkNET2w3L2RDdnFVYVJWR21PeUMxSlV5KzEwUzd3eTJQRzdGa0RsMmdlT0hCVEJTQmdrcWhraUc5dzBCQ1E4eFJUQkRNQW9HQ0NxR1NJYjNEUU1ITUE0R0NDcUdTSWIzRFFNQ0FnSUFnREFOQmdncWhraUc5dzBEQWdJQlFEQUhCZ1VyRGdNQ0J6QU5CZ2dxaGtpRzl3MERBZ0lCS0RBS0JnZ3Foa2pPUFFRREFnUkhNRVVDSVFENXJrU3VMbUlheTR4bTBHL1JjcmRDNm84MjZjL25QRmw4TjZuTU5kbzBLd0lnRHV6dy9qVXJUWVo3czV2SVVoSHQyaE9LNjFYMnB1UkZTdFR6aHZEVGJnST08L2RhdGE+CgkJCQkJCQkJCgk8a2V5PkVudGl0bGVtZW50czwva2V5PgoJPGRpY3Q+CgkJCQkKCQkJCTxrZXk+YXBwbGljYXRpb24taWRlbnRpZmllcjwva2V5PgoJCTxzdHJpbmc+QUtHNU5BVEg5OS5jb20ubWx2cC5hcHA8L3N0cmluZz4KCQkJCQoJCQkJPGtleT5rZXljaGFpbi1hY2Nlc3MtZ3JvdXBzPC9rZXk+CgkJPGFycmF5PgoJCQkJPHN0cmluZz5BS0c1TkFUSDk5Lio8L3N0cmluZz4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnRva2VuPC9zdHJpbmc+CgkJPC9hcnJheT4KCQkJCQoJCQkJPGtleT5nZXQtdGFzay1hbGxvdzwva2V5PgoJCTxmYWxzZS8+CgkJCQkKCQkJCTxrZXk+Y29tLmFwcGxlLmRldmVsb3Blci50ZWFtLWlkZW50aWZpZXI8L2tleT4KCQk8c3RyaW5nPkFLRzVOQVRIOTk8L3N0cmluZz4KCgk8L2RpY3Q+Cgk8a2V5PkV4cGlyYXRpb25EYXRlPC9rZXk+Cgk8ZGF0ZT4yMDI1LTA2LTE0VDAyOjU1OjMxWjwvZGF0ZT4KCTxrZXk+TmFtZTwva2V5PgoJPHN0cmluZz5NTFZQPC9zdHJpbmc+Cgk8a2V5PlByb3Zpc2lvbmVkRGV2aWNlczwva2V5PgoJPGFycmF5PgoJCTxzdHJpbmc+MDAwMDgxMzAtMDAwQTQ5RDYwMTYwMDAxQzwvc3RyaW5nPgoJPC9hcnJheT4KCTxrZXk+VGVhbUlkZW50aWZpZXI8L2tleT4KCTxhcnJheT4KCQk8c3RyaW5nPkFLRzVOQVRIOTk8L3N0cmluZz4KCTwvYXJyYXk+Cgk8a2V5PlRlYW1OYW1lPC9rZXk+Cgk8c3RyaW5nPkt5bGUgQ29uZWw8L3N0cmluZz4KCTxrZXk+VGltZVRvTGl2ZTwva2V5PgoJPGludGVnZXI+NzwvaW50ZWdlcj4KCTxrZXk+VVVJRDwva2V5PgoJPHN0cmluZz45YWY5ODA4MC05YTQzLTQzMTktYjZiMi00ODlmNDEwOThiNWM8L3N0cmluZz4KCTxrZXk+VmVyc2lvbjwva2V5PgoJPGludGVnZXI+MTwvaW50ZWdlcj4KPC9kaWN0Pgo8L3BsaXN0PqCCDT8wggQ0MIIDHKADAgECAgg9Wfg36tHYnzANBgkqhkiG9w0BAQsFADBzMS0w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\
 sudo npm run tauri ios build
cargo tauri dev -t aarch64-apple-ios
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri && cargo tauri dev -t ios
sudo cargo tauri ios build --target aarch64-sim
cd /Users/kyleconel/Documents/Projects/mlvp/src-tauri && rustup show
which cargo
cd gen/apple && xcodegen generate
cd ../.. && cargo tauri ios build
cd .. && rm -rf dist && npm run build
sudo rm -rf dist
npm run build
cd src-tauri && cargo tauri ios build
cargo tauri ios dev
rm -rf gen/apple
cargo clean
ls
cd Downloads
ls
base64 -i MLVP.mobileprovision | pbcopy
cd mlvp && security find-identity -v -p codesigning
ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/MLVP.mobileprovision
xcrun devicectl list devices
open /Applications/Xcode.app
rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/MLVP.mobileprovision
xcrun xctrace list devices
codesign -dvvv /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Agents/MobileDeviceAgent
security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/MLVP.mobileprovision | plutil -p -
date
open src-tauri/gen/apple/mlvp.xcodeproj
xcrun simctl list
npm run tauri ios build
chmod -R 755 dist/
rm -rf dist/ && npm run build
sudo npm run tauri ios build
npm run tauri ios build
cd mlvp && npm run tauri ios build
sudo chown -R $(whoami):$(whoami) dist/
sudo chown -R $(whoami):staff dist/
npm run tauri ios build
sudo chown -R $(whoami):staff src-tauri/target/
npm run tauri ios build
npm run tauri ios dev
ls -la src-tauri/gen/apple/build/arm64/
open -a Xcode && xcrun devicectl device install app --device 00008130-000A49D60160001C src-tauri/gen/apple/build/arm64/mlvp.ipa
npm run dev
cd /Users/kyleconel/Documents/Projects && ffmpeg -i "[Kayoanime] - S01E09.mp4" -map 0:v -map 0:a:0 -map 0:a:1 -c:v copy -c:a copy -metadata:s:a:0 language=jpn -metadata:s:a:0 title="Japanese" -metadata:s:a:1 language=eng -metadata:s:a:1 title="English" "[Kayoanime] - S01E09_with_tracks.mp4"
find /Users/kyleconel -name "*Kayoanime*" -type f 2>/dev/null
ffmpeg -i "/Users/kyleconel/Downloads/[Kayoanime] - S01E09.mkv" 2>&1 | head -30
ffmpeg -i "/Users/kyleconel/Downloads/[Kayoanime] - S01E09.mkv" 2>&1 | grep "Stream"
ffmpeg -i ~/Downloads/\[Kayoanime\]\ -\ S01E09.mkv -c:v libx264 -c:a aac -map 0:v:0 -map 0:a:0 -map 0:a:1 -var_stream_map "v:0,a:0 v:0,a:1" -master_pl_name playlist.m3u8 -hls_time 10 -hls_list_size 0 -f hls hls_output_%v.m3u8
cd ~/Downloads && ffmpeg -i "[Kayoanime] - S01E09.mkv" -c:v libx264 -c:a aac -map 0:v:0 -map 0:a:0 -map 0:a:1 -f hls -hls_time 10 -master_pl_name master.m3u8 -var_stream_map "v:0,a:0 v:0,a:1" test_audio_%v.m3u8
ffmpeg -i "[Kayoanime] - S01E09.mkv" -map 0:v:0 -map 0:a:0 -c:v libx264 -c:a aac -f hls -hls_time 10 -hls_list_size 0 english.m3u8
cd /Users/kyleconel/Documents/Projects/mlvp && npm install
ps aux | grep "npm run dev" | grep -v grep
curl -s http://localhost:5173 | head -20
lsof -i :5173
pkill -f "npm run dev"
npm run dev
lsof -ti :1420 | xargs kill -9
cd mlvp && sleep 3 && curl -s http://localhost:1420 | head -10
# Install Homebrew first if you don't have it\
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\
\
# Then install FFmpeg\
brew install ffmpeg\
\
\

brew install ffmpeg
npm run dev
base64 -i MLVP.mobileprovision | pbcopy
base64 -i MLVP.mobileprovision | pbcopy
npm run tauri build
sudo npm run tauri build
IOS_MOBILE_PROVISION=\
 sudo npm run tauri ios build
IOS_MOBILE_PROVISION=\
 sudo npm run tauri ios build
 sudo npm run tauri ios build
IOS_MOBILE_PROVISION=\
 sudo npm run tauri ios build
 sudo npm run tauri ios build
 sudo npm run tauri ios build
npm run tauri ios build
IOS_MOBILE_PROVISION=\
 sudo npm run tauri ios build
npm run dev
npm run dev
cd mlvp && npm run dev